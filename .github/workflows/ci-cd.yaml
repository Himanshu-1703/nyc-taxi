name: CI-CD Pipeline

on:
  push:

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - uses: iterative/setup-cml@v2

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-actions.txt

    - name: Run python file
      run: python ci_cd_demo.py

    - name: Create CML Report
      env:
        REPO_TOKEN: ${{ secrets.CML_SECRET }} 
      run: |
        echo "# Model Evalutaion Results" >> report.md
        echo "## Bar Graph of Model" >> report.md
        echo "![](./plots/bar_plot.png)" >> report.md
        cml comment create report.md
    

#   build-and-push-ecr-image:
#     name: Push to ECR
#     needs: integration
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Install Utilities
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y jq unzip
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
#           IMAGE_TAG: latest
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  
#   Continuous-Deployment:
#     runs-on: self-hosted
#     needs: build-and-push-ecr-image
#     steps:
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2
      
#       - name: Pull latest images
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
#           IMAGE_TAG: latest
#         run: |
#           docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
#       - name: Delete Previous Container
#         run: |
#           docker rm -f trip-duration || true

#       - name: Run Docker Image to serve users
#         run: |
#           docker run -d -p 8000:8000 --ipc="host" --name=trip-duration -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest


